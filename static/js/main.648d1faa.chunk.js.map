{"version":3,"sources":["assets/deleteIcon.svg","assets/loadIcon.svg","components/cell/index.jsx","utils/generateGrid.js","components/button/index.jsx","components/overlay/index.jsx","components/modal/index.jsx","components/input/index.jsx","components/options/index.jsx","utils/checkNeighbours.js","utils/boardTick.js","utils/localStorageManager.js","components/savedStateCard/index.jsx","components/stateLoader/index.jsx","components/board/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Cell","_ref","cellColour","props","Object","objectWithoutProperties","react_default","a","createElement","assign","className","style","backgroundColor","cellSize","generateGrid","width","height","percentageAlive","row","Math","floor","col","Array","from","length","Number","random","Button","children","Overlay","onClick","concat","open","Modal","components_overlay","Input","Fragment","label","Options","_useState","useState","_useState2","slicedToArray","isSaveModeOpen","setIsSaveModeOpen","_useState3","_useState4","saveStateName","setSaveStateName","input","type","id","round","options","startingAlive","min","max","onChange","step","value","minCellAlive","maxCellAlive","minCellDead","maxCellDead","interval","components_button","onStart","paused","onClose","onReset","event","target","onSave","checkNeighbours","grid","x","y","aliveCount","Boolean","boardTick","board","minNeighAlive","maxNeighAlive","minNeighDead","maxNeighDead","map","cell","neighbours","saveState","stateName","stateValue","localStorage","setItem","JSON","stringify","loadState","parse","getItem","getAvailableSaves","keys","deleteSave","removeItem","deleteAllSaves","clear","SavedStateCard","state","name","onDelete","alt","src","deleteIcon","onLoad","loadIcon","StateLoader","availableStates","components_savedStateCard","key","onRefresh","onDeleteAll","Board","_this","onDeleteAllStates","setState","onRefreshStates","toggleModal","modalVisible","toggleLoaderModal","loaderModalVisible","handleStart","generateTick","setTimeout","resetGrid","onChangeOptions","objectSpread","defineProperty","clickHandler","_event$target$dataset","dataset","newBoard","toConsumableArray","currentTarget","_this2","this","filledCell","components_modal","components_options","components_stateLoader","components_cell","data-x","data-y","React","Component","App","board_Board","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.648d1faa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/deleteIcon.44ec53f2.svg\";","module.exports = __webpack_public_path__ + \"static/media/loadIcon.79b21682.svg\";","import React from \"react\";\r\nimport \"./cell.css\";\r\n\r\nconst Cell = ({ cellColour, ...props }) => (\r\n  <div\r\n    className=\"cell\"\r\n    style={{\r\n      backgroundColor: cellColour\r\n    }}\r\n    {...props}\r\n  />\r\n);\r\n\r\nexport default Cell;\r\n","export const cellSize = { x: 32, y: 32 };\r\n\r\nconst generateGrid = (width, height, percentageAlive) => {\r\n  const row = Math.floor(height / cellSize.y);\r\n  const col = Math.floor(width / cellSize.x);\r\n  return Array.from({ length: row }, () =>\r\n    Array.from({ length: col }, () => Number(Math.random() < percentageAlive))\r\n  );\r\n};\r\nexport default generateGrid;\r\n","import React from \"react\";\r\nimport \"./button.css\";\r\n\r\nconst Button = props => (\r\n  <button className=\"btn\" {...props}>\r\n    {props.children}\r\n  </button>\r\n);\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./overlay.css\";\r\n\r\nconst Overlay = props => (\r\n  <div\r\n    onClick={props.onClick}\r\n    className={`overlay${props.open ? \" open\" : \"\"}`}\r\n  >\r\n    {props.children}\r\n  </div>\r\n);\r\n\r\nexport default Overlay;\r\n","import React from \"react\";\r\nimport Overlay from \"../overlay\";\r\nimport \"./modal.css\";\r\n\r\nconst Modal = props => (\r\n  <Overlay onClick={props.onClick} open={props.open}>\r\n    <div className=\"modal-container\">{props.children}</div>\r\n  </Overlay>\r\n);\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\n\r\nconst Input = props => (\r\n  <>\r\n    {props.label && <label>{props.label}</label>}\r\n    <input {...props} />\r\n  </>\r\n);\r\n\r\nexport default Input;\r\n","import React, { useState } from \"react\";\r\nimport Button from \"../button\";\r\nimport Input from \"../input\";\r\nimport \"./options.css\";\r\n\r\nconst Options = props => {\r\n  const [isSaveModeOpen, setIsSaveModeOpen] = useState(false);\r\n  const [saveStateName, setSaveStateName] = useState(\"\");\r\n  const toggleSaveMode = () => setIsSaveModeOpen(!isSaveModeOpen);\r\n  const onChangeSaveStateName = event => setSaveStateName(event.target.value);\r\n  const onSubmitSave = () => props.onSave(saveStateName);\r\n\r\n  return (\r\n    <div className=\"options-container\">\r\n      <div className=\"options\">\r\n        <div>\r\n          <Input\r\n            type=\"range\"\r\n            id=\"startingAlive\"\r\n            label={`Percentage of starting living cells - ${Math.round(\r\n              props.options.startingAlive * 100\r\n            )}%`}\r\n            min={0}\r\n            max={1}\r\n            onChange={props.onChange}\r\n            step={0.01}\r\n            value={props.options.startingAlive}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Input\r\n            type=\"range\"\r\n            id=\"minCellAlive\"\r\n            label={`Minimum number of neighbours for an alive cell to survive - ${\r\n              props.options.minCellAlive\r\n            } (Max ${props.options.maxCellAlive})`}\r\n            min={0}\r\n            max={props.options.maxCellAlive}\r\n            onChange={props.onChange}\r\n            value={props.options.minCellAlive}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Input\r\n            type=\"range\"\r\n            id=\"maxCellAlive\"\r\n            label={`Maximum number of neighbours for an alive cell to survive - ${\r\n              props.options.maxCellAlive\r\n            } (Min ${props.options.minCellAlive})`}\r\n            min={props.options.minCellAlive}\r\n            max={8}\r\n            onChange={props.onChange}\r\n            value={props.options.maxCellAlive}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Input\r\n            type=\"range\"\r\n            id=\"minCellDead\"\r\n            label={`Minimum number of neighbours for a dead cell to come alive - ${\r\n              props.options.minCellDead\r\n            } (Max ${props.options.maxCellDead})`}\r\n            min={0}\r\n            max={props.options.maxCellDead}\r\n            onChange={props.onChange}\r\n            value={props.options.minCellDead}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Input\r\n            type=\"range\"\r\n            id=\"maxCellDead\"\r\n            label={`Maximum number of neighbours for a dead cell to come alive - ${\r\n              props.options.maxCellDead\r\n            } (Min ${props.options.minCellAlive})`}\r\n            min={props.options.minCellDead}\r\n            max={8}\r\n            onChange={props.onChange}\r\n            value={props.options.maxCellDead}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Input\r\n            type=\"range\"\r\n            id=\"interval\"\r\n            label={`Interval of each tick - ${props.options.interval}ms`}\r\n            min={25}\r\n            max={2000}\r\n            step={25}\r\n            onChange={props.onChange}\r\n            value={props.options.interval}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Input\r\n            type=\"color\"\r\n            id=\"cellColour\"\r\n            label={`Select cell colour - ${props.options.cellColour}`}\r\n            onChange={props.onChange}\r\n            value={props.options.cellColour}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"options\">\r\n        <Button onClick={props.onStart}>\r\n          {props.paused ? \"Start\" : \"Stop\"}\r\n        </Button>\r\n        <Button onClick={toggleSaveMode}>Save</Button>\r\n        <Button onClick={props.onClose}>Close</Button>\r\n        <Button onClick={props.onReset}>Reset</Button>\r\n      </div>\r\n      <div>\r\n        <Input\r\n          type=\"text\"\r\n          onChange={onChangeSaveStateName}\r\n          value={saveStateName}\r\n        />\r\n        <Button onClick={onSubmitSave}>Submit</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Options;\r\n","const checkNeighbours = (grid, x, y) => {\r\n  let aliveCount = 0;\r\n  for (let row = y - 1; row <= y + 1; row++) {\r\n    for (let col = x - 1; col <= x + 1; col++) {\r\n      if (grid[row] && grid[row][col]) aliveCount++;\r\n    }\r\n  }\r\n  return aliveCount - Boolean(grid[y][x]);\r\n};\r\n\r\nexport default checkNeighbours;\r\n","import checkNeighbours from \"./checkNeighbours\";\r\n\r\nconst boardTick = (\r\n  board,\r\n  minNeighAlive,\r\n  maxNeighAlive,\r\n  minNeighDead,\r\n  maxNeighDead\r\n) => {\r\n  return board.map((row, y) =>\r\n    row.map((cell, x) => {\r\n      const neighbours = checkNeighbours(board, x, y);\r\n      if (cell !== 0) {\r\n        if (neighbours <= maxNeighAlive && neighbours >= minNeighAlive) {\r\n          return 1;\r\n        }\r\n      } else {\r\n        if (neighbours <= maxNeighDead && neighbours >= minNeighDead) {\r\n          return 1;\r\n        }\r\n      }\r\n      return 0;\r\n    })\r\n  );\r\n};\r\n\r\nexport default boardTick;\r\n","export const saveState = (stateName, stateValue) =>\r\n  localStorage.setItem(stateName, JSON.stringify(stateValue));\r\n\r\nexport const loadState = stateName =>\r\n  JSON.parse(localStorage.getItem(stateName));\r\n\r\nexport const getAvailableSaves = () => Object.keys(localStorage);\r\n\r\nexport const deleteSave = saveState => localStorage.removeItem(saveState);\r\n\r\nexport const deleteAllSaves = () => localStorage.clear();\r\n","import React from \"react\";\r\nimport Button from \"../button\";\r\nimport deleteIcon from \"../../assets/deleteIcon.svg\";\r\nimport loadIcon from \"../../assets/loadIcon.svg\";\r\nimport \"./savedStateCard.css\";\r\n\r\nconst SavedStateCard = props => {\r\n  return (\r\n    <li className=\"saved-state-container\">\r\n      {props.state}\r\n      <div>\r\n        <Button name={props.state} onClick={props.onDelete}>\r\n          <img width=\"20px\" alt={`delete ${props.state}`} src={deleteIcon} />\r\n        </Button>\r\n        <Button name={props.state} onClick={props.onLoad}>\r\n          <img width=\"20px\" alt={`load ${props.state}`} src={loadIcon} />\r\n        </Button>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default SavedStateCard;\r\n","import React from \"react\";\r\nimport Button from \"../button\";\r\nimport \"./stateLoader.css\";\r\nimport SaveStateCard from \"../savedStateCard\";\r\nimport { saveState } from \"../../utils/localStorageManager\";\r\n\r\nconst StateLoader = props => {\r\n  return (\r\n    <div className=\"load-container\">\r\n      <ul className=\"states-container\">\r\n        {props.availableStates.length\r\n          ? props.availableStates.map(state => (\r\n              <SaveStateCard\r\n                onDelete={props.onDelete}\r\n                onLoad={props.onLoad}\r\n                state={state}\r\n                key={state}\r\n              />\r\n            ))\r\n          : \"No available states\"}\r\n      </ul>\r\n      <div>\r\n        <Button onClick={props.onRefresh}>Refresh State List</Button>\r\n        <Button onClick={props.onDeleteAll}>Delete All Saves</Button>\r\n        <Button onClick={props.onClose}>Close</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StateLoader;\r\n","import React from \"react\";\r\nimport Cell from \"../cell\";\r\nimport \"./board.css\";\r\nimport generateGrid from \"../../utils/generateGrid\";\r\nimport Button from \"../button\";\r\nimport Modal from \"../modal\";\r\nimport Options from \"../options\";\r\nimport boardTick from \"../../utils/boardTick\";\r\nimport {\r\n  deleteAllSaves,\r\n  getAvailableSaves,\r\n  saveState,\r\n  deleteSave,\r\n  loadState\r\n} from \"../../utils/localStorageManager\";\r\nimport StateLoader from \"../stateLoader\";\r\n\r\nexport default class Board extends React.Component {\r\n  state = {\r\n    paused: true,\r\n    availableStates: getAvailableSaves() || [],\r\n    board: generateGrid(this.props.width, this.props.height),\r\n    options: {\r\n      startingAlive: 0.2,\r\n      minCellAlive: 2,\r\n      maxCellAlive: 3,\r\n      minCellDead: 3,\r\n      maxCellDead: 3,\r\n      interval: 100,\r\n      cellColour: \"#008000\"\r\n    }\r\n  };\r\n  onDeleteAllStates = () => {\r\n    deleteAllSaves();\r\n    this.setState({ availableStates: [] });\r\n  };\r\n  onRefreshStates = () => {\r\n    this.setState({ availableStates: getAvailableSaves() || [] });\r\n  };\r\n  toggleModal = event => {\r\n    this.setState({ modalVisible: !this.state.modalVisible });\r\n  };\r\n  toggleLoaderModal = event => {\r\n    this.setState({ loaderModalVisible: !this.state.loaderModalVisible });\r\n  };\r\n  handleStart = event => {\r\n    this.setState(\r\n      { paused: !this.state.paused },\r\n      !this.state.paused ? () => null : this.generateTick\r\n    );\r\n  };\r\n  generateTick = event => {\r\n    setTimeout(\r\n      () =>\r\n        this.setState(\r\n          {\r\n            board: boardTick(\r\n              this.state.board,\r\n              this.state.options.minCellAlive,\r\n              this.state.options.maxCellAlive,\r\n              this.state.options.minCellDead,\r\n              this.state.options.maxCellDead\r\n            )\r\n          },\r\n          this.state.paused ? () => null : this.generateTick\r\n        ),\r\n      this.state.options.interval\r\n    );\r\n  };\r\n  resetGrid = event => {\r\n    this.setState({\r\n      board: generateGrid(\r\n        this.props.width,\r\n        this.props.height,\r\n        this.state.options.startingAlive\r\n      )\r\n    });\r\n  };\r\n  onChangeOptions = event => {\r\n    this.setState({\r\n      options: {\r\n        ...this.state.options,\r\n        [event.target.id]: event.target.value\r\n      }\r\n    });\r\n  };\r\n  clickHandler = event => {\r\n    // dataset will read the data-*something* attribute in target, in this case giving us a {x: n, y: m} type of object\r\n    const { x, y } = event.target.dataset;\r\n    // generating a newBoard element, as we need to pass a new object to setState, so that React can spot the differences\r\n    const newBoard = [...this.state.board.map(row => row.map(cell => cell))]; // or const newBoard = [...this.state.board.map(row => [...row])];\r\n    // updating the value only of the clicked cell\r\n    newBoard[y][x] = Number(!this.state.board[y][x]);\r\n    // finally, updating state with the newBoard\r\n    this.setState({ board: newBoard });\r\n  };\r\n  onSave = saveStateName => {\r\n    saveState(saveStateName, this.state.board);\r\n    this.setState({ availableStates: getAvailableSaves() || [] });\r\n  };\r\n  onDelete = event => {\r\n    deleteSave(event.currentTarget.name);\r\n    this.setState({ availableStates: getAvailableSaves() || [] });\r\n  };\r\n  onLoad = event => {\r\n    this.setState({ board: loadState(event.currentTarget.name) });\r\n  };\r\n  render() {\r\n    const filledCell = this.state.options.cellColour,\r\n      emptyCell = \"rgba(0,0,0,0)\";\r\n    return (\r\n      <>\r\n        <Modal onClose={this.toggleModal} open={this.state.modalVisible}>\r\n          <Options\r\n            paused={this.state.paused}\r\n            onStart={this.handleStart}\r\n            onChange={this.onChangeOptions}\r\n            options={this.state.options}\r\n            onClose={this.toggleModal}\r\n            onReset={this.resetGrid}\r\n            onSave={this.onSave}\r\n          />\r\n        </Modal>\r\n        <Modal\r\n          onClose={this.toggleLoaderModal}\r\n          open={this.state.loaderModalVisible}\r\n        >\r\n          <StateLoader\r\n            onSave={() => null}\r\n            availableStates={this.state.availableStates}\r\n            onClose={this.toggleLoaderModal}\r\n            onRefresh={this.onRefreshStates}\r\n            onDeleteAll={this.deleteAllSaves}\r\n            onDelete={this.onDelete}\r\n            onLoad={this.onLoad}\r\n          />\r\n        </Modal>\r\n        <div className=\"board-container\">\r\n          <div className=\"board\">\r\n            {this.state.board.map((row, y) => (\r\n              <div key={y} className=\"board-row\">\r\n                {row.map((cell, x) => (\r\n                  <Cell\r\n                    key={x}\r\n                    data-x={x}\r\n                    data-y={y}\r\n                    onClick={this.clickHandler}\r\n                    cellColour={cell ? filledCell : emptyCell}\r\n                  />\r\n                ))}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <Button onClick={this.handleStart}>\r\n            {this.state.paused ? \"Start\" : \"Stop\"}\r\n          </Button>\r\n          <Button onClick={this.toggleModal}>Settings</Button>\r\n          <Button onClick={this.resetGrid}>Reset</Button>\r\n          <Button onClick={this.toggleLoaderModal}>Load</Button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board width={1000} height={600} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}