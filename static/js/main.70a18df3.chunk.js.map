{"version":3,"sources":["components/cell/index.jsx","utils/generateGrid.js","components/button/index.jsx","components/overlay/index.jsx","components/modal/index.jsx","components/input/index.jsx","components/options/index.jsx","utils/checkNeighbours.js","utils/boardTick.js","components/board/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Cell","props","react_default","a","createElement","Object","assign","className","style","backgroundColor","concat","life","cellSize","generateGrid","width","height","percentageAlive","row","Math","floor","col","Array","from","length","Number","random","Button","children","Overlay","onClick","open","Modal","components_overlay","Input","Fragment","label","Options","input","type","id","round","options","startingAlive","min","max","onChange","step","value","minCellAlive","maxCellAlive","minCellDead","maxCellDead","interval","components_button","onClose","onReset","checkNeighbours","grid","x","y","aliveCount","Boolean","boardTick","board","minNeighAlive","maxNeighAlive","minNeighDead","maxNeighDead","map","cell","neighbours","Board","state","paused","_this","toggleModal","event","setState","modalVisible","handleStart","generateTick","setTimeout","resetGrid","onChangeOptions","objectSpread","defineProperty","target","clickHandler","_event$target$dataset","dataset","newBoard","toConsumableArray","_this2","this","components_modal","key","components_cell","data-x","data-y","React","Component","App","board_Board","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70a18df3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./cell.css\";\r\n\r\nconst Cell = props => (\r\n  <div\r\n    className=\"cell\"\r\n    style={{ backgroundColor: `rgba(200, 100, 100, ${props.life})` }}\r\n    {...props}\r\n  />\r\n);\r\n\r\nexport default Cell;\r\n","export const cellSize = { x: 32, y: 32 };\r\n\r\nconst generateGrid = (width, height, percentageAlive) => {\r\n  const row = Math.floor(height / cellSize.y);\r\n  const col = Math.floor(width / cellSize.x);\r\n  return Array.from({ length: row }, () =>\r\n    Array.from({ length: col }, () => Number(Math.random() < percentageAlive))\r\n  );\r\n};\r\nexport default generateGrid;\r\n","import React from \"react\";\r\nimport \"./button.css\";\r\n\r\nconst Button = props => (\r\n  <button className=\"btn\" {...props}>\r\n    {props.children}\r\n  </button>\r\n);\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./overlay.css\";\r\n\r\nconst Overlay = props => (\r\n  <div\r\n    onClick={props.onClick}\r\n    className={`overlay${props.open ? \" open\" : \"\"}`}\r\n  >\r\n    {props.children}\r\n  </div>\r\n);\r\n\r\nexport default Overlay;\r\n","import React from \"react\";\r\nimport Overlay from \"../overlay\";\r\nimport \"./modal.css\";\r\n\r\nconst Modal = props => (\r\n  <Overlay onClick={props.onClick} open={props.open}>\r\n    <div className=\"modal-container\">{props.children}</div>\r\n  </Overlay>\r\n);\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\n\r\nconst Input = props => (\r\n  <>\r\n    {props.label && <label>{props.label}</label>}\r\n    <input {...props} />\r\n  </>\r\n);\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport Button from \"../button\";\r\nimport Input from \"../input\";\r\n\r\nconst Options = props => (\r\n  <div className=\"options-container\">\r\n    <div className=\"options\">\r\n      <Input\r\n        type=\"range\"\r\n        id=\"startingAlive\"\r\n        label={`Percentage of starting living cells - ${Math.round(\r\n          props.options.startingAlive * 100\r\n        )}%`}\r\n        min={0}\r\n        max={1}\r\n        onChange={props.onChange}\r\n        step={0.01}\r\n        value={props.options.startingAlive}\r\n      />\r\n      <div>\r\n        <Input\r\n          type=\"range\"\r\n          id=\"minCellAlive\"\r\n          label={`Minimum number of neighbours for an alive cell to survive - ${\r\n            props.options.minCellAlive\r\n          }`}\r\n          min={0}\r\n          max={props.options.maxCellAlive}\r\n          onChange={props.onChange}\r\n          value={props.options.minCellAlive}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Input\r\n          type=\"range\"\r\n          id=\"maxCellAlive\"\r\n          label={`Maximum number of neighbours for an alive cell to survive - ${\r\n            props.options.maxCellAlive\r\n          }`}\r\n          min={props.options.minCellAlive}\r\n          max={8}\r\n          onChange={props.onChange}\r\n          value={props.options.maxCellAlive}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Input\r\n          type=\"range\"\r\n          id=\"minCellDead\"\r\n          label={`Minimum number of neighbours for a dead cell to come alive - ${\r\n            props.options.minCellDead\r\n          }`}\r\n          min={0}\r\n          max={props.options.maxCellDead}\r\n          onChange={props.onChange}\r\n          value={props.options.minCellDead}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Input\r\n          type=\"range\"\r\n          id=\"maxCellDead\"\r\n          label={`Maximum number of neighbours for a dead cell to come alive - ${\r\n            props.options.maxCellDead\r\n          }`}\r\n          min={props.options.minCellDead}\r\n          max={8}\r\n          onChange={props.onChange}\r\n          value={props.options.maxCellDead}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Input\r\n          type=\"range\"\r\n          id=\"interval\"\r\n          label={`Interval of each tick - ${props.options.interval}ms`}\r\n          min={25}\r\n          max={2000}\r\n          step={25}\r\n          onChange={props.onChange}\r\n          value={props.options.interval}\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"options\">\r\n      <Button>Save</Button>\r\n      <Button onClick={props.onClose}>Close</Button>\r\n      <Button onClick={props.onReset}>Reset</Button>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Options;\r\n","const checkNeighbours = (grid, x, y) => {\r\n  let aliveCount = 0;\r\n  for (let row = y - 1; row <= y + 1; row++) {\r\n    for (let col = x - 1; col <= x + 1; col++) {\r\n      if (grid[row] && grid[row][col]) aliveCount++;\r\n    }\r\n  }\r\n  return aliveCount - Boolean(grid[y][x]);\r\n};\r\n\r\nexport default checkNeighbours;\r\n","import checkNeighbours from \"./checkNeighbours\";\r\n\r\nconst boardTick = (\r\n  board,\r\n  minNeighAlive,\r\n  maxNeighAlive,\r\n  minNeighDead,\r\n  maxNeighDead\r\n) => {\r\n  return board.map((row, y) =>\r\n    row.map((cell, x) => {\r\n      const neighbours = checkNeighbours(board, x, y);\r\n      if (cell !== 0) {\r\n        if (neighbours <= maxNeighAlive && neighbours >= minNeighAlive) {\r\n          return 1;\r\n        }\r\n      } else {\r\n        if (neighbours <= maxNeighDead && neighbours >= minNeighDead) {\r\n          return 1;\r\n        }\r\n      }\r\n      return 0;\r\n    })\r\n  );\r\n};\r\n\r\nexport default boardTick;\r\n","import React from \"react\";\r\nimport Cell from \"../cell\";\r\nimport \"./board.css\";\r\nimport generateGrid from \"../../utils/generateGrid\";\r\nimport Button from \"../button\";\r\nimport Modal from \"../modal\";\r\nimport Options from \"../options\";\r\nimport boardTick from \"../../utils/boardTick\";\r\n\r\nexport default class Board extends React.Component {\r\n  state = {\r\n    paused: true,\r\n    board: generateGrid(this.props.width, this.props.height),\r\n    options: {\r\n      startingAlive: 0.2,\r\n      minCellAlive: 2,\r\n      maxCellAlive: 3,\r\n      minCellDead: 3,\r\n      maxCellDead: 3,\r\n      interval: 100\r\n    }\r\n  };\r\n  toggleModal = event => {\r\n    this.setState({ modalVisible: !this.state.modalVisible });\r\n  };\r\n  handleStart = event => {\r\n    this.setState(\r\n      { paused: !this.state.paused },\r\n      !this.state.paused ? () => null : this.generateTick\r\n    );\r\n  };\r\n  generateTick = event => {\r\n    setTimeout(\r\n      () =>\r\n        this.setState(\r\n          {\r\n            board: boardTick(\r\n              this.state.board,\r\n              this.state.options.minCellAlive,\r\n              this.state.options.maxCellAlive,\r\n              this.state.options.minCellDead,\r\n              this.state.options.maxCellDead\r\n            )\r\n          },\r\n          this.state.paused ? () => null : this.generateTick\r\n        ),\r\n      this.state.options.interval\r\n    );\r\n  };\r\n  resetGrid = event => {\r\n    this.setState({\r\n      board: generateGrid(\r\n        this.props.width,\r\n        this.props.height,\r\n        this.state.options.startingAlive\r\n      )\r\n    });\r\n  };\r\n  onChangeOptions = event => {\r\n    this.setState({\r\n      options: {\r\n        ...this.state.options,\r\n        [event.target.id]: event.target.value\r\n      }\r\n    });\r\n  };\r\n  clickHandler = event => {\r\n    // dataset will read the data-*something* attribute in target, in this case giving us a {x: n, y: m} type of object\r\n    const { x, y } = event.target.dataset;\r\n    // generating a newBoard element, as we need to pass a new object to setState, so that React can spot the differences\r\n    const newBoard = [...this.state.board.map(row => row.map(cell => cell))]; // or const newBoard = [...this.state.board.map(row => [...row])];\r\n    // updating the value only of the clicked cell\r\n    newBoard[y][x] = Number(!this.state.board[y][x]);\r\n    // finally, updating state with the newBoard\r\n    this.setState({ board: newBoard });\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <Modal onClose={this.toggleModal} open={this.state.modalVisible}>\r\n          <Options\r\n            onChange={this.onChangeOptions}\r\n            options={this.state.options}\r\n            onClose={this.toggleModal}\r\n            onReset={this.resetGrid}\r\n          />\r\n        </Modal>\r\n        <div className=\"board-container\">\r\n          <div className=\"board\">\r\n            {this.state.board.map((row, y) => (\r\n              <div key={y} className=\"board-row\">\r\n                {row.map((cell, x) => (\r\n                  <Cell\r\n                    key={x}\r\n                    data-x={x}\r\n                    data-y={y}\r\n                    life={cell}\r\n                    onClick={this.clickHandler}\r\n                  />\r\n                ))}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <Button onClick={this.handleStart}>\r\n            {this.state.paused ? \"Start\" : \"Stop\"}\r\n          </Button>\r\n          <Button onClick={this.toggleModal}>Settings</Button>\r\n          <Button onClick={this.resetGrid}>Reset</Button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board width={1000} height={600} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}